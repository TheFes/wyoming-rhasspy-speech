language: en

lists:
  color:
    values:
      - "white"
      - "black"
      - "red"
      - "orange"
      - "yellow"
      - "green"
      - "blue"
      - "purple"
      - "brown"
      - "pink"
      - "turquoise"
  brightness:
    range:
      type: "percentage"
      from: 10
      to: 100
      step: 10
  seconds:
    range:
      from: 10
      to: 100
      step: 10
  minutes_small:
    range:
      from: 2
      to: 9
  minutes_large:
    range:
      from: 10
      to: 100
      step: 10
  minutes_extra:
    values:
      - in: forty five
        out: 45
  minutes_half:
    values:
      - in: half
        out: 30
  hours_half:
    values:
      - in: half
        out: 30
  hours:
    range:
      from: 1
      to: 100
  cover_classes:
    values:
      - blinds
      - curtain
      - curtains
      - garage door
      - window
      - windows

  # TODO
  name:
    values:
      - in: Front Door
        context:
          domain: lock
      - in: Kitchen Door
        context:
          domain: lock
      - in: Poorly Installed Door
        context:
          domain: lock
      - in: Openable Lock
        context:
          domain: lock
      - in: Humidifier
        context:
          domain: humidifier
      - in: Dehumidifier
        context:
          domain: humidifier
      - in: Hygrostat
        context:
          domain: humidifier
      - in: Demo Water Heater
        context:
          domain: water_heater
      - in: Demo Water Heater Celsius
        context:
          domain: water_heater
      - in: Pergola Roof
        context:
          domain: cover
      - in: Heat pump
        context:
          domain: climate
      - in: Hvac
        context:
          domain: climate
      - in: Ecobee
        context:
          domain: climate
      - in: light
        context:
          domain: light
      - in: Bed Light
        context:
          domain: light
      - in: light in the bedroom
        context:
          domain: light
      - in: Ceiling lights
        context:
          domain: light
      - in: Kitchen Lights
        context:
          domain: light
      - in: overhead light
        context:
          domain: light
      - in: standing light
        context:
          domain: light
      - in: overhead lights
        context:
          domain: light
      - in: Ceiling lights
        context:
          domain: light
      - in: Living Room Lights
        context:
          domain: light
      - in: Entrance Color + White Lights
        context:
          domain: light
      - in: Outside Temperature
        context:
          domain: sensor
      - in: Outside Humidity
        context:
          domain: sensor
      - in: Kitchen Window
        context:
          domain: cover
      - in: Hall Window
        context:
          domain: cover
      - in: Living Room Window
        context:
          domain: cover
      - in: Garage Door
        context:
          domain: cover
      - in: Living Room Fan
        context:
          domain: fan
      - in: Ceiling Fan
        context:
          domain: fan
      - in: Percentage Full Fan
        context:
          domain: fan
      - in: Percentage Limited Fan
        context:
          domain: fan
      - in: Preset Only Limited Fan
        context:
          domain: fan
      - in: Decorative Lights
        context:
          domain: switch
      - in: AC
        context:
          domain: switch
      - in: Media Player
        context:
          domain: media_player
      - in: Shopping List
        context:
          domain: todo
      - in: Downstairs TV
        context:
          domain: media_player
      - in: Family Room TV
        context:
          domain: media_player
      - in: Demo Weather South
        context:
          domain: weather
      - in: Liste des courses
        context:
          domain: todo
      - in: Todo List 1
        context:
          domain: todo
      - in: party time
        context:
          domain: scene
      - in: basement light
        context:
          domain: light
  area:
    values:
      - Living Room
      - Kitchen
      - cuisine
      - Bedroom
      - Garage
      - Entrance
      - Office
      - Basement
      - Exercise Room
  floor:
    values:
      - First floor
      - ground
      - Second floor

intents:
  # nevermind
  HassNevermind:
    data:
      - sentences:
          - "nevermind"

  # date, time, weather
  HassGetCurrentTime:
    data:
      - sentences:
          - "(what[']s|what is) the time [[right ]now]"
          - "what time is it [[right ]now]"

  HassGetCurrentDate:
    data:
      - sentences:
          - "(what[']s|what is) the date [today]"
          - "(what[']s|what is) today's date"

  HassGetWeather:
    data:
      - sentences:
          - "(what[']s|what is) the weather [like]"

      - sentences:
          - "(what[']s|what is) the {name} weather [like]"
          - "(what[']s|what is) the weather [like] in {name}"
        requires_context:
          domain: weather

  # turn on/off
  # open/close
  # lock/unlock
  HassTurnOn:
    data:
      # turn on
      - sentences:
          - "turn on [the] lights"

      - sentences:
          - "turn on [the] {name}"
          - "turn on [the] {name} in [the] {area}"
          - "turn on [the] {area} {name}"
          - "turn on [the] {name} (on|in) [the] {floor} [floor]"
          - "turn on [the] {floor} [floor] {name}"
        requires_context:
          domain:
            - light
            - switch

      - sentences:
          - "turn on [the] {area} lights"
          - "turn on [the] lights in [the] {area}"
          - "turn on [the] {floor} [floor] lights"
          - "turn on [the] lights (on|in) [the] {floor} [floor]"

      # open
      - sentences:
          - "open [the] {name}"
        requires_context:
          domain:
            - cover
            - valve

      - sentences:
          - "open [the] {cover_classes} in [the] {area}"
          - "open [the] {area} {cover_classes}"

      - sentences:
          - "open [the] {cover_classes} (on|in) [the] {floor} [floor]"
          - "open [the] {floor} [floor] {cover_classes}"

      # lock
      - sentences:
          - "lock [the] {name}"
        requires_context:
          domain: lock

  HassTurnOff:
    data:
      # turn off
      - sentences:
          - "turn off [the] lights"

      - sentences:
          - "turn off [the] {name}"
          - "turn off [the] {name} in [the] {area}"
          - "turn off [the] {area} {name}"
          - "turn off [the] {name} (on|in) [the] {floor} [floor]"
          - "turn off [the] {floor} [floor] {name}"
        requires_context:
          domain:
            - light
            - switch

      - sentences:
          - "turn off [the] {area} lights"
          - "turn off [the] lights in [the] {area}"

      - sentences:
          - "turn off [the] {floor} [floor] lights"
          - "turn off [the] lights (on|in) [the] {floor} [floor]"

      # close
      - sentences:
          - "close [the] {name}"
        requires_context:
          domain:
            - cover
            - valve

      - sentences:
          - "close [the] {cover_classes} in [the] {area}"
          - "close [the] {area} {cover_classes}"
          - "close [the] {cover_classes} (on|in) [the] {floor} [floor]"
          - "close [the] {floor} [floor] {cover_classes}"

      # unlock
      - sentences:
          - "unlock [the] {name}"
        requires_context:
          domain: lock

  # light brightness/color
  HassLightSet:
    data:
      # brightness
      - sentences:
          - "set [the] brightness of [the] {name} to {brightness} percent"
          - "set [the] {name} brightness to {brightness} percent"
        requires_context:
          domain: light

      - sentences:
          - "set [the] brightness of [the] {area} to {brightness} percent"
          - "set [the] {area} brightness to {brightness} percent"

      - sentences:
          - "set [the] {floor} [floor] brightness to {brightness} percent"
          - "set [the] brightness of [the] {floor} [floor] to {brightness} percent"

      # color
      - sentences:
          - "set [the] [color of [the]] {name} to {color}"
          - "set [the] {name} [color] to {color}"
        requires_context:
          domain: light

      - sentences:
          - "set [the] [color of [the]] {area} lights to {color}"
          - "set [the] {area} lights to {color}"
          - "set [the] lights in [the] {area} to {color}"

      - sentences:
          - "set [the] [color of [the]] {floor} [floor] lights to {color}"
          - "set [the] {floor} [floor] lights to {color}"
          - "set [the] lights in [the] {floor} [floor] to {color}"

  # timers
  HassStartTimer:
    data:
      # seconds
      - sentences:
          - "(set|start|create) [a] timer for 1 second"
          - "(set|start|create) [a] timer for {seconds} seconds"

      # minutes
      - sentences:
          - "(set|start|create) [a] timer for 1 minute"
          - "(set|start|create) [a] timer for {minutes_small} minutes"
          - "(set|start|create) [a] timer for {minutes_large} minutes"
          - "(set|start|create) [a] timer for {minutes_extra} minutes"

      # minutes half
      - sentences:
          - "(set|start|create) [a] timer for 1 and a {minutes_half:seconds} minutes"
          - "(set|start|create) [a] timer for {minutes_small} and a {minutes_half:seconds} minutes"
          - "(set|start|create) [a] timer for {minutes_large} and a {minutes_half:seconds} minutes"
          - "(set|start|create) [a] timer for {minutes_extra} and a {minutes_half:seconds} minutes"

      # hours
      - sentences:
          - "(set|start|create) [a] timer for 1 hour"
          - "(set|start|create) [a] timer for {hours} hours"

      # hours half
      - sentences:
          - "(set|start|create) [a] timer for 1 and a {hours_half:minutes} hours"
          - "(set|start|create) [a] timer for {hours} and a {hours_half:hours} hours"

      # hours + minutes
      - sentences:
          - "(set|start|create) [a] timer for 1 hour and 1 minute"
          - "(set|start|create) [a] timer for {hours} hours and {minutes_small} minutes"
          - "(set|start|create) [a] timer for {hours} hours and {minutes_large} minutes"
          - "(set|start|create) [a] timer for {hours} hours and {minutes_extra} minutes"

  HassCancelTimer:
    data:
      - sentences:
          - "(cancel|stop) [the|my] timer"

  HassCancelAllTimers:
    data:
      - sentences:
          - "(cancel|stop) all [of] [the|my] timers"

  HassPauseTimer:
    data:
      - sentences:
          - "pause [the|my] timer"

  HassUnpauseTimer:
    data:
      - sentences:
          - "resume [the|my] timer"

  HassTimerStatus:
    data:
      - sentences:
          - "timer status"
          - "status of [the|my] timer[s]"
          - "[how much] time [is] left on [the|my] timer[s]"

  # media players
  HassMediaPause:
    data:
      - sentences:
          - "pause [[the ]music]"

      - sentences:
          - "pause [the] {name}"
        requires_context:
          domain: media_player

  HassMediaUnpause:
    data:
      - sentences:
          - "resume [[the ]music]"

      - sentences:
          - "resume [the] {name}"
        requires_context:
          domain: media_player

  HassMediaNext:
    data:
      - sentences:
          - "(next|skip) [[this ](track|song)]"

      - sentences:
          - "(next|skip) [[the ](track|song)] on [the] {name}"
        requires_context:
          domain: media_player

  # temperature
  HassGetTemperature:
    data:
      - sentences:
          - "(what is|what[']s) the (temp|temperature)"

      - sentences:
          - "(what is|what[']s) [the] {name} (temp|temperature)"
          - "(what is|what[']s) [the] (temp|temperature) of [the] {name}"
        requires_context:
          domain: climate

      - sentences:
          - "(what is|what[']s) the (temp|temperature) in [the] {area}"
          - "(what is|what[']s) the {area} (temp|temperature)"

      - sentences:
          - "(what is|what[']s) the (temp|temperature) (on|in) [the] {floor} [floor]"
          - "(what is|what[']s) the {floor} [floor] (temp|temperature)"

  # questions
  HassGetState:
    data:

      # doors, etc.
      - sentences:
          - "is [the] {name} {state}"
        requires_context:
          domain:
            - cover
            - valve
        lists:
          state:
            values:
              - open
              - closed

      # locks
      - sentences:
          - "is [the] {name} {state}"
        requires_context:
          domain: lock
        lists:
          state:
            values:
              - locked
              - unlocked
